Structures : are user defined value types, that are comparable to classes, but for inheritance


Enumerations : Are a set of named constants. Is a user defined value type


OOPS : An Architectural style of creating/writing applications

 WYSIWYG ( What you see is what you get)

  - Encapsulation  : Class represented as a unit of data and behaviour(methods)
  - Abstraction : Hiding internal details and providing only essential details
  - Inheritance : extension of already existing features/functionalities plus other new features/functionalities
  - Polymorphism : An object exhibiting different behaviours at different times or differenr object behaving differently to the same given message

class classname { } 

Objects - are constructed instances of a class that abides by the class definition

All Classes are internal by default
---------------------------------------

Class : All the members of the class are Private by default
--------------------------------------------------------------

Constructors : Are Special Function/s of a class
               They have the same name as that of the class
               Assign values to the fields (Initialize with data)
               Constructors have to be either public or internal
               Constructors do not have any return type
               Constructors can be overloaded
               Constructors can be called explicitly

Destructors : Are special function of a class
              They have the same name as that of the class prefixed with a ~ (tilde)
              They do not have any return type
              They cannot be overloaded
              We cannot expliciltly call a destructor, they are called automatically when the object looses focus


Abstraction-Encapsulation: 
Encapsulation is defined as the process of enclosing one or more items within a physical or a logical package. 
It prevents access to implementation details
Encapsulation is implemented by using "access specifiers"

Access Specifiers : Defines the scope and visibility of a class member. 

C# supports the following access specifers:

private : Accessible only within the class where it is declared. Not accessible anywhere else.

public : Are accessible within or outside the assembly. Accessible with or without any derivation. But all we need is an object of that class, whose public members we want to access

protected : Are accessible to the class where it is declared, and all the derived classes irrespective of being in the same assembly or different assemblies

internal : It acts like a public access within the assembly, and like private outside the assembly

internal protected or protected internal : Internal to all the derived or non-derived classes of the same assembly. Protected to all the derived classes irrespective of the assembly.
